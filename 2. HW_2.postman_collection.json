{
	"info": {
		"_postman_id": "27db10d0-b657-4e70-9aca-b0bc8cd77b4b",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22342443"
	},
	"item": [
		{
			"name": "EP_1 (first)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/first?name=Mikhail&age=32",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail"
						},
						{
							"key": "age",
							"value": "32"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2 (user_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_f = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let resp_name = resp_f.name\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql('Mikhail');\r",
							"});\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = +resp_f.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(32);\r",
							"});\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = resp_f.salary\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(90000);\r",
							"});\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"\r",
							"//7. Спарсить request\r",
							"let req_f = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name\r",
							"pm.test(\"Check name + variable\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = +req_f.age\r",
							"pm.test(\"Check age + variable\", function () {\r",
							"    pm.expect(resp_age).to.eql(32);\r",
							"});\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.\r",
							"let req_salary = +req_f.salary\r",
							"pm.test(\"Check salary + variable\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary_1_5_year == salary*4\", function () {\r",
							"    pm.expect(resp_f.family.u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mikhail",
							"type": "text"
						},
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "90000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3 (object_info_3)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_f = pm.response.json();\r",
							"\r",
							"//4. Спарсить request\r",
							"let req_f = pm.request.url.query.all();\r",
							"console.log(req_f)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_f.name\r",
							"let req_name = req_f[0].value\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f[1].value\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let resp_salary = +resp_f.salary\r",
							"let req_salary = +req_f[2].value\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_f.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Checking property name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Checking property age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Checking value name\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Checking value age\", function () {\r",
							"    pm.expect(resp_f.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip_port}}/object_info_3?name=Mikhail&age=32&salary=99000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "99000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4 (object_info_4)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var resp_f = pm.response.json();\r",
							"\r",
							"//4. Спарсить request\r",
							"let req_f = pm.request.url.query.all();\r",
							"console.log(req_f)\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_f.name\r",
							"let req_name = req_f[0].value\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let resp_age = +resp_f.age\r",
							"let req_age = +req_f[1].value\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"request salary = \" + req_f[2])\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"response salary = \" + resp_f.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"response salary = \" + resp_f.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary = \" + resp_f.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"response salary = \" + resp_f.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let resp_salary_0 = +resp_f.salary[0]\r",
							"let req_salary = +req_f[2].value\r",
							"pm.test(\"Check salary [0]\", function () {\r",
							"    pm.expect(resp_salary_0).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let resp_salary_1 = +resp_f.salary[1]\r",
							"pm.test(\"Check salary [1]\", function () {\r",
							"    pm.expect(resp_salary_1).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let resp_salary_2 = +resp_f.salary[2]\r",
							"pm.test(\"Check salary [2]\", function () {\r",
							"    pm.expect(resp_salary_2).to.eql(req_salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", resp_f.name);\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", resp_f.age);\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", resp_f.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// 1 вариант\r",
							"for (let i = 0; i < resp_f.salary.length; i++) {\r",
							"    console.log(+resp_f.salary[i])\r",
							"}\r",
							"\r",
							"// 2 вариант\r",
							"for (i in resp_f.salary) {\r",
							"    console.log(+resp_f.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{ip_port}}/object_info_4?name=Mikhail&age=32&salary=99000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mikhail"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "99000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5 (user_info_2)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var resp_f = pm.response.json();\r",
							"\r",
							"//7. Спарсить request\r",
							"let req_f = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Checking property start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Checking property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Checking property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Checking property qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Checking property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Checking property person\", function () {\r",
							"    pm.expect(resp_f).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary == salary\", function () {\r",
							"    pm.expect(+resp_f.start_qa_salary).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months == salary*2\", function () {\r",
							"    pm.expect(+resp_f.qa_salary_after_6_months).to.eql(+req_f.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months == salary*2.7\", function () {\r",
							"    pm.expect(+resp_f.qa_salary_after_12_months).to.eql(+req_f.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year == salary*3.3\", function () {\r",
							"    pm.expect(+resp_f['qa_salary_after_1.5_year']).to.eql(+req_f.salary*3.3);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_year == salary*3.7\", function () {\r",
							"    pm.expect(+resp_f['qa_salary_after_3.5_years']).to.eql(+req_f.salary*3.8);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_name[1] == salary\", function () {\r",
							"    pm.expect(+resp_f.person.u_name[1]).to.eql(+req_f.salary);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check person.u_age == req_f.age\", function () {\r",
							"    pm.expect(+resp_f.person.u_age).to.eql(+req_f.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years == salary*4.2\", function () {\r",
							"    pm.expect(+resp_f.person.u_salary_5_years).to.eql(+req_f.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" for (i in resp_f.person) {\r",
							"     console.log(resp_f.person[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}